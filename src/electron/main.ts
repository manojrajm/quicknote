// Copyright (c) 2022 Sri Lakshmi Kanthan P
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT


import installExtension, { REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS } from 'electron-devtools-installer';
import { Menu, MenuItem, app, ipcMain } from 'electron';
import FileStore from './notestore/FIleStore';
import settings from 'electron-settings';
import { menubar, Menubar } from 'menubar';
import * as C from './constants';
import open from 'open';
import path from 'path';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).


// Main Window Preload Entry
declare const NOTE_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Main Window Load entry
declare const NOTE_WINDOW_WEBPACK_ENTRY: string;


/******************************************
 *          App startup phase             *
 *****************************************/


// stop your app launching at install
if (require('electron-squirrel-startup')) {
  app.quit();
}

// get the lock to chen single instance
if (!app.requestSingleInstanceLock()) {
  app.quit();
}

// Add app to system startup
app.setLoginItemSettings({
  openAtLogin: app.isPackaged,
  openAsHidden: true,
  path: app.getPath("exe")
});


/******************************************
 *          App state instance            *
 *****************************************/


// Main Window is created on mb.app.on('ready')
const mb: Menubar = menubar({
  index: NOTE_WINDOW_WEBPACK_ENTRY,
  tooltip: C.APPLICATION_NAME,
  icon: C.APPLICATION_ICON,
  browserWindow: {
    icon: C.APPLICATION_ICON,
    frame: false,
    show: false,
    skipTaskbar: true,
    resizable: true,
    webPreferences: {
      preload: NOTE_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged
    }
  }
});


/******************************************
 *          App initialize section        *
 *****************************************/


// on ready event
mb.on('ready', () => mb.on('after-create-window', async () => {
  // set the context menu for the tray
  mb.tray.setContextMenu(Menu.buildFromTemplate([
    { label: 'About', click: () => open(C.APPLICATION_URL) },
    { label: 'Issue', click: () => open(C.ISSUE_RAISE_URL) },
    { type: 'separator' },
    { label: 'Quit', click: () => app.quit() }
  ]));

  // size of the window
  const [width, height] = (await settings.has('window.size'))
    ? (await settings.get('window.size')) as [number, number]
    : C.APPLICATION_SIZE;

  // set the size
  mb.window.setSize(width, height);

  // on resized event save the size
  mb.window.on('resized', () => {
    settings.set('window.size', mb.window.getSize());
  });

  // file store to store the note
  const fileStore = await FileStore.getStore(path.join(
    C.APPLICATION_HOME, ".notes"
  ));

  // ipc event for recv
  ipcMain.on(C.RECV_FROM_RENDER, async (event, arg) => {
    await fileStore.setNote(arg);
  });

  // ipc event for send
  ipcMain.handle(C.SEND_NOTE_RENDER, async () => {
    return await fileStore.getNote();
  });

  // install dev tools if not packaged
  if (!mb.app.isPackaged) {
    await installExtension(REACT_DEVELOPER_TOOLS);
    await installExtension(REDUX_DEVTOOLS);
  }

  // Create Non visible Menu 
  const menu = new Menu();

  // Add ESC to close the app
  menu.append(new MenuItem({
    label: 'Hide QuickNote',
    visible: false,
    accelerator: 'Esc',
    click: () => {
      mb.window.hide();
    }
  }));

  // Add for dev tools
  menu.append(new MenuItem({
    label: "Open Dev Tools",
    visible: false,
    accelerator: "Control+D",
    click: () => {
      mb.window.webContents.openDevTools();
    }
  }));

  // Add for Quit
  menu.append(new MenuItem({
    label: "Quit QuickNote",
    visible: false,
    accelerator: "Control+Q",
    click: () => {
      mb.app.quit();
    }
  }));

  // set the menu
  Menu.setApplicationMenu(menu);

  // on app exit
  mb.app.on('quit', async () => {
    mb.tray.destroy();
  })
}));
